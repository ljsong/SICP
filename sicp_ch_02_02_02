#lang racket

(define (length items)
  (if (null? items)
      0
      (+ 1 (length (cdr items)))))

(define (count-leaves items)
  (cond ((null? items) 0)
        ((not (pair? items)) 1)
        (else (+ (count-leaves (car items))
                 (count-leaves (cdr items))))))

(define x (cons (list 1 2) (list 3 4)))
(length x)
(count-leaves x)
(count-leaves (list 1 (list 2 (list 3 4))))

(define y (list (list 1 2) (list 3 4)))
y

#|
(define (reverse items)
  (define (iter remained-items result)
    (if (null? remained-items)
        result
        (iter (cdr remained-items)
              (cons (car remained-items) result))))
  (iter items '()))
|#

(define (reverse items)
  (if (null? items)
      '()
      (append (reverse (cdr items)) (list (car items)))))

(define (deep-reverse items)
  (if (not (pair? items))
      items
      (append (deep-reverse (cdr items))
            (list (deep-reverse (car items))))))

(reverse y)
(deep-reverse y)
(define z (list 1 2 3 4))
(deep-reverse z)

(define (fringe tree)
  (display tree))

(fringe y)
  
